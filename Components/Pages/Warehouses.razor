@page "/warehouses"
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject IWarehouseService WarehouseService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Warehouses</PageTitle>
<h1>Warehouses</h1>

@if (warehouses.Count == 0)
{
    <p><em>No warehouses found.</em></p>
}
else
{
    <table class="table">
        <thead>
        <th>City</th>
        <th>Code</th>
        <th>More Information</th>
        @if (isAdmin)
        {
            <th>Edit</th>
            <th>Delete</th>
        }
        </thead>
        <tbody>
        @foreach (var warehouse in warehouses)
        {
            <tr>
                <td>@warehouse.Location</td>
                <td>@warehouse.WarehouseCode</td>
                <td>
                    <button class="btn btn-success" @onclick="@((() => MoreWarehouse(warehouse.WarehouseId)))">More
                    </button>
                </td>
                @if (isAdmin)
                {
                    <td>
                        <button class="btn btn-primary" @onclick="@(() => EditWarehouse(warehouse.WarehouseId))">Edit
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-danger"
                                @onclick="@(() => ShowDeleteConfirmation(warehouse.WarehouseId))">Delete
                        </button>
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>

    @if (isAdmin)
    {
        <button class="btn btn-primary" @onclick="AddWarehouse">Add a New Warehouse</button>
    }
}

<!-- Modal -->
<div class="modal fade show" tabindex="-1" role="dialog" style="display: @(isDeleteModalVisible ? "block" : "none");">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" @onclick="HideDeleteConfirmation" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this <war></war>ehouse?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteWarehouse">Delete</button>
                <button type="button" class="btn btn-success" @onclick="HideDeleteConfirmation">Cancel</button>
            </div>
        </div>
    </div>
</div>


@code {
    List<Warehouse> warehouses = new List<Warehouse>();
    bool isDeleteModalVisible = false;
    int warehouseIdToDelete = 0;

    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        warehouses = await WarehouseService.GetAllWarehousesAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            isAdmin = user.IsInRole("Admin");
        }
    }

    void EditWarehouse(int id)
    {
        NavigationManager.NavigateTo($"/edit-warehouse/{id}");
    }

    void MoreWarehouse(int id)
    {
        NavigationManager.NavigateTo($"/more-about-warehouse/{id}");
    }

    void AddWarehouse()
    {
        NavigationManager.NavigateTo($"/edit-warehouse");
    }

    void ShowDeleteConfirmation(int id)
    {
        isDeleteModalVisible = true;
        warehouseIdToDelete = id;
    }

    void HideDeleteConfirmation()
    {
        isDeleteModalVisible = false;
        warehouseIdToDelete = 0;
    }

    async Task ConfirmDeleteWarehouse()
    {
        if (warehouseIdToDelete != 0)
        {
            await WarehouseService.DeleteWarehouseAsync(warehouseIdToDelete);
            warehouses = await WarehouseService.GetAllWarehousesAsync();
        }

        HideDeleteConfirmation();
    }

}
