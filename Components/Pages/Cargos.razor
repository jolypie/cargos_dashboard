@page "/cargos"
@using Microsoft.AspNetCore.Components.Authorization
@inject ICargoService CargoService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Cargos</PageTitle>

<div class="btn-group py-4" role="group" aria-label="Cargo Filters">
    <button class="btn btn-secondary" @onclick="ShowAllCargos" disabled="@(currentFilter == CargoFilter.All)">All
        Cargos
    </button>
    <button class="btn btn-secondary" @onclick="ShowCargosInWarehouses"
            disabled="@(currentFilter == CargoFilter.InWarehouse)">Cargos in Warehouses
    </button>
    <button class="btn btn-secondary" @onclick="ShowCargosInAirplanes"
            disabled="@(currentFilter == CargoFilter.InAirplane)">Cargos in Airplanes
    </button>
</div>

@if (cargos.Count == 0)
{
    <p><em>No cargos found.</em></p>
}
else
{
    <table class="table">
        <thead>
        <th>Cargo Code</th>
        <th>Description</th>
        <th>
            <button class="btn btn-link p-0" @onclick="SortByWeight">
                Weight (kg) @(sortDirection == SortDirection.Ascending && currentSortColumn == "Weight" ? "↑" : "↓")
            </button>
        </th>
        <th>Location</th>
        <th>
            <button class="btn btn-link p-0" @onclick="SortByWarehouseTime">
                Added to Warehouse
                At @(sortDirection == SortDirection.Ascending && currentSortColumn == "WarehouseTime" ? "↑" : "↓")
            </button>
        </th>
        <th>
            <button class="btn btn-link p-0" @onclick="SortByAirplaneTime">
                Added to Airplane
                At @(sortDirection == SortDirection.Ascending && currentSortColumn == "AirplaneTime" ? "↑" : "↓")
            </button>
        </th>


        @if (isAdmin)
        {
            @if (currentFilter == CargoFilter.InWarehouse || currentFilter == CargoFilter.InAirplane)
            {
                <th>Move</th>
            }

            <th>Edit</th>
            <th>Delete</th>
        }

        </thead>

        <tbody>
        @foreach (var cargo in cargos)
        {
            <tr>
                <td>@cargo.CargoCode</td>
                <td>@cargo.Description</td>
                <td>@cargo.Weight</td>
                <td>@(cargo.Status == CargoStatus.InWarehouse ? cargo.Warehouse?.WarehouseCode : cargo.Airplane?.AirplaneCode)</td>
                <td>@cargo.AddedToWarehouseAt</td>
                <td>@cargo.AddedToAirplaneAt</td>
                @if (isAdmin)
                {
                    @if (currentFilter == CargoFilter.InWarehouse)
                    {
                        <td>
                            <button class="btn btn-success" @onclick="@(() => MoveCargoToAirplane(cargo.CargoId))">Move
                                to
                                Airplane
                            </button>
                        </td>
                    }

                    @if (currentFilter == CargoFilter.InAirplane)
                    {
                        <td>
                            <button class="btn btn-success" @onclick="@(() => MoveCargoToWarehouse(cargo.CargoId))">Move
                                to
                                Warehouse
                            </button>
                        </td>
                    }

                    <td>
                        <button class="btn btn-primary" @onclick="@(() => EditCargo(cargo.CargoId))">Edit</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => ShowDeleteConfirmation(cargo.CargoId))">Delete
                        </button>
                    </td>
                }

            </tr>
        }
        </tbody>
    </table>
    @if (isAdmin)
    {
        <button class="btn btn-primary" @onclick="AddCargo">Add a New Cargo</button>
    }
}

<!-- Modal for deletion confirmation -->
<div class="modal fade show" tabindex="-1" role="dialog" style="display: @(isDeleteModalVisible ? "block" : "none");">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" @onclick="HideDeleteConfirmation" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this cargo?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteCargo">Delete</button>
                <button type="button" class="btn btn-success" @onclick="HideDeleteConfirmation">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Cargo> cargos = new List<Cargo>();
    private bool isDeleteModalVisible = false;
    private int cargoIdToDelete = 0;
    private CargoFilter currentFilter = CargoFilter.All;

    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        cargos = await CargoService.GetAllCargosAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            isAdmin = user.IsInRole("Admin");
        }
    }

    private async Task ShowAllCargos()
    {
        currentFilter = CargoFilter.All;
        cargos = await CargoService.GetAllCargosAsync();
    }

    private async Task ShowCargosInWarehouses()
    {
        currentFilter = CargoFilter.InWarehouse;
        cargos = await CargoService.GetCargosInWarehousesAsync();
    }

    private async Task ShowCargosInAirplanes()
    {
        currentFilter = CargoFilter.InAirplane;
        cargos = await CargoService.GetCargosInAirplanesAsync();
    }

    private void EditCargo(int id)
    {
        NavigationManager.NavigateTo($"/edit-cargo/{id}");
    }

    private void AddCargo()
    {
        NavigationManager.NavigateTo("/edit-cargo");
    }

    private void MoveCargoToAirplane(int id)
    {
        NavigationManager.NavigateTo($"/move-cargo-to-airplane/{id}");
    }

    private void MoveCargoToWarehouse(int id)
    {
        NavigationManager.NavigateTo($"/move-warehouse/{id}");
    }

    private void ShowDeleteConfirmation(int id)
    {
        isDeleteModalVisible = true;
        cargoIdToDelete = id;
    }

    private void HideDeleteConfirmation()
    {
        isDeleteModalVisible = false;
        cargoIdToDelete = 0;
    }

    private async Task ConfirmDeleteCargo()
    {
        if (cargoIdToDelete != 0)
        {
            await CargoService.DeleteCargoAsync(cargoIdToDelete);
            cargos = await CargoService.GetAllCargosAsync();
        }

        HideDeleteConfirmation();
    }

    private enum CargoFilter
    {
        All,
        InWarehouse,
        InAirplane
    }

    ///
    private string currentSortColumn = string.Empty;

    private SortDirection sortDirection = SortDirection.Ascending;

    private void SortByWeight()
    {
        ToggleSortDirection("Weight");
        cargos = sortDirection == SortDirection.Ascending
            ? cargos.OrderBy(c => c.Weight).ToList()
            : cargos.OrderByDescending(c => c.Weight).ToList();
    }

    private void SortByWarehouseTime()
    {
        ToggleSortDirection("WarehouseTime");
        cargos = sortDirection == SortDirection.Ascending
            ? cargos.OrderBy(c => c.AddedToWarehouseAt).ToList()
            : cargos.OrderByDescending(c => c.AddedToWarehouseAt).ToList();
    }

    private void SortByAirplaneTime()
    {
        ToggleSortDirection("AirplaneTime");
        cargos = sortDirection == SortDirection.Ascending
            ? cargos.OrderBy(c => c.AddedToAirplaneAt).ToList()
            : cargos.OrderByDescending(c => c.AddedToAirplaneAt).ToList();
    }

    private void ToggleSortDirection(string column)
    {
        if (currentSortColumn == column)
        {
            sortDirection = sortDirection == SortDirection.Ascending
                ? SortDirection.Descending
                : SortDirection.Ascending;
        }
        else
        {
            currentSortColumn = column;
            sortDirection = SortDirection.Ascending;
        }
    }

    private enum SortDirection
    {
        Ascending,
        Descending
    }

}
