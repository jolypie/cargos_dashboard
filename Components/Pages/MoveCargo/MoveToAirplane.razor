@page "/move-cargo-to-airplane/{CargoId:int}"

@inject ICargoService CargoService
@inject IAirplaneService AirplaneService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Move Cargo to Airplane</h3>

@if (CurrentCargo != null && AirplanesInWarehouse.Any())
{
    <table class="table">
        <thead>
        <tr>
            <th>Airplane Code</th>
            <th>Current Load (kg)</th>
            <th>Max Load (kg)</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var airplane in AirplanesInWarehouse)
        {
            <tr>
                <td>@airplane.AirplaneCode</td>
                <td>@airplane.CurrentLoad</td>
                <td>@airplane.MaxLoad</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => AddCargoToAirplane(airplane.AirplaneId)"
                            disabled="@(airplane.CurrentLoad + CurrentCargo.Weight > airplane.MaxLoad)">
                        Move Cargo
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else if (CurrentCargo == null)
{
    <p>Loading cargo details...</p>
}
else
{
    <p>No airplanes available in the warehouse for this cargo.</p>
}

@code {
    [Parameter] public int CargoId { get; set; }

    private Cargo CurrentCargo { get; set; }
    private List<Airplane> AirplanesInWarehouse { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentCargo = await CargoService.GetCargoByIdAsync(CargoId);

            if (CurrentCargo?.WarehouseId != null)
            {
                AirplanesInWarehouse = await AirplaneService.GetAirplanesByWarehouseIdAsync((int)CurrentCargo.WarehouseId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task AddCargoToAirplane(int airplaneId)
    {
        try
        {
            await CargoService.AddCargoToAirplaneAsync(CargoId, airplaneId);

            NavigationManager.NavigateTo($"/more-about-airplane/{airplaneId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding cargo to airplane: {ex.Message}");
        }
    }
}