@page "/more-about-warehouse/{WarehouseId:int}"
@inject IWarehouseService WarehouseService
@inject ICargoService CargoService
@inject IAirplaneService AirplaneService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>More Info about @CurrentWarehouse.WarehouseCode Warehouse</PageTitle>
<h3>More Info about @CurrentWarehouse.WarehouseCode Warehouse</h3>

<table class="table">
    <thead>
    <th>Location</th>
    <th>Code</th>
    </thead>
    <tbody>
    <tr>
        <td>@CurrentWarehouse.Location</td>
        <td>@CurrentWarehouse.WarehouseCode</td>
    </tr>
    </tbody>
</table>

<h3>All cargos in @CurrentWarehouse.WarehouseCode Warehouse</h3>

<table class="table">
    <thead>
    <tr>
        <th>Cargo Code</th>
        <th>Description</th>
        <th>Weight (kg)</th>
        <th>Added to Warehouse At</th>
    </tr>
    </thead>
    <tbody>
    @if (CargosInWarehouse is not null && CargosInWarehouse.Any())
    {
        @foreach (var cargo in CargosInWarehouse)
        {
            <tr>
                <td>@cargo.CargoCode</td>
                <td>@cargo.Description</td>
                <td>@cargo.Weight</td>
                <td>@cargo.AddedToAirplaneAt</td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="3">No packages found for this warehouse.</td>
        </tr>
    }
    </tbody>
</table>

<h3>All airplanes that are attached to @CurrentWarehouse.WarehouseCode Warehouse</h3>

<table class="table">
    <thead>
    <tr>
        <th>Airplane Code</th>
        <th>Max Load (kg)</th>
        <th>Current Load (kg)</th>
    </tr>
    </thead>
    <tbody>
    @if (CargosInWarehouse is not null && CargosInWarehouse.Any())
    {
        @foreach (var airplane in AirplanesInWarehouse)
        {
            <tr>
                <td>@airplane.AirplaneCode</td>
                <td>@airplane.MaxLoad</td>
                <td>@airplane.CurrentLoad</td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="3">No airplanes found for this warehouse.</td>
        </tr>
    }
    </tbody>
</table>

@code {
    [Parameter] public int? WarehouseId { get; set; }

    public Warehouse CurrentWarehouse { get; set; } = new();
    public List<Cargo> CargosInWarehouse { get; set; } = new();
    public List<Airplane> AirplanesInWarehouse { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (WarehouseId is not null)
        {
            var warehouse = await WarehouseService.GetWarehouseByIdAsync((int)WarehouseId);
            if (warehouse is not null)
            {
                CurrentWarehouse = warehouse;
            }
        }

        CargosInWarehouse = await CargoService.GetCargosByWarehouseIdAsync((int)WarehouseId);
        AirplanesInWarehouse = await AirplaneService.GetAirplanesByWarehouseIdAsync((int)WarehouseId);
    }


}