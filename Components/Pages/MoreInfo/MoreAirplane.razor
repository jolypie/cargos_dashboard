@page "/more-about-airplane/{AirplaneId:int}"
@inject IWarehouseService WarehouseService
@inject ICargoService CargoService
@inject IAirplaneService AirplaneService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>More Info about @CurrentAirplane?.AirplaneCode Airplane</PageTitle>
<h3>More Info about @CurrentAirplane?.AirplaneCode Airplane</h3>

@if (CurrentAirplane is not null)
{
    <table class="table">
        <thead>
        <th>Code</th>
        <th>Max Load (kg)</th>
        <th>Current Load (kg)</th>
        <th>Attached Warehouse</th>
        <th>Location</th>
        </thead>
        <tbody>
        <tr>
            <td>@CurrentAirplane.AirplaneCode</td>
            <td>@CurrentAirplane.MaxLoad</td>
            <td>@CurrentAirplane.CurrentLoad</td>
            <td>
                @(warehouses.TryGetValue(CurrentAirplane.WarehouseId, out var warehouse1)
                    ? warehouse1.Location
                    : "No Warehouse")
            </td>
            <td>
                @(warehouses.TryGetValue(CurrentAirplane.WarehouseId, out var warehouse2)
                    ? warehouse2.Code
                    : "No Warehouse")
            </td>

        </tr>
        </tbody>
    </table>

    <h3>All cargos in @CurrentAirplane.AirplaneCode Airplane</h3>

    <table class="table">
        <thead>
        <tr>
            <th>Cargo Code</th>
            <th>Description</th>
            <th>Weight (kg)</th>
            <th>Added to Airplane At</th>
        </tr>
        </thead>
        <tbody>
        @if (CargosInAirplane is not null && CargosInAirplane.Any())
        {
            @foreach (var cargo in CargosInAirplane)
            {
                <tr>
                    <td>@cargo.CargoCode</td>
                    <td>@cargo.Description</td>
                    <td>@cargo.Weight</td>
                    <td>@cargo.AddedToAirplaneAt</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3">No packages found for this airplane.</td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>No airplane data available.</p>
}

@code {
    [Parameter] public int? AirplaneId { get; set; }

    public Airplane? CurrentAirplane { get; set; }
    public List<Cargo> CargosInAirplane { get; set; } = new();
    List<Airplane> airplanes = new List<Airplane>();
    Dictionary<int, (string Code, string Location)> warehouses = new();

    
    protected override async Task OnParametersSetAsync()
    {
        if (AirplaneId is not null)
        {
            CurrentAirplane = await AirplaneService.GetAirplaneByIdAsync((int)AirplaneId) ?? new Airplane();
            CargosInAirplane = await CargoService.GetCargosByAirplaneIdAsync((int)AirplaneId) ?? new List<Cargo>();
        }
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        airplanes = await AirplaneService.GetAllAirplanesAsync();
        var warehouseList = await WarehouseService.GetAllWarehousesAsync();
        warehouses = warehouseList.ToDictionary(
            w => w.WarehouseId, 
            w => (w.WarehouseCode, w.Location)
        );
    }
}

